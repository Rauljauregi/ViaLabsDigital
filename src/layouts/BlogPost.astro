---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '@/components/FormattedDate'
import BaseLayout from '@/layouts/BaseLayout'
import Tag from '@/components/Tag'
import type { MarkdownHeading } from 'astro'
import { Image } from 'astro:assets'
import ListRelatedPosts from '@/components/ListRelatedPosts'
import '../styles/global.css';

type Props = {
    data: CollectionEntry<'blog'>['data']
    headings: MarkdownHeading[]
    readTime: string
    relatedPosts?: CollectionEntry<'blog'>[]
}

const { data, readTime, headings, relatedPosts = [] } = Astro.props
const { title, description, pubDate, updatedDate, heroImage, tags } = data
const articleDate = pubDate.toISOString()
---

<BaseLayout
    title={title}
    description={description}
    image={heroImage?.src}
    articleDate={articleDate}>
    <article class='md:py-4 max-w-xs sm:max-w-none md:max-w-none'>
        <header class='mb-3 flex flex-col justify-center items-center gap-6'>
            <div class='flex flex-col gap-2'>
                <div class='flex items-center justify-center gap-x-1'>
                    <p class='text-center text-sm text-opacity-50'>
                        Publicado <FormattedDate date={pubDate} />
                    </p>
                    <p class='text-center text-sm text-opacity-50 font-bold'>
                        - {readTime}
                    </p>
                </div>
                <h1 class='title text-center text-3xl md:text-4xl md:pb-2.5 font-semibold opacity-0'>
                    {title}
                </h1>
            </div>

            <div class='flex flex-wrap justify-center items-center gap-2 gap-y-4 md:gap-5 mb-6'>
                {tags?.map((tag) => (
                    <Tag tag={tag} />
                ))}
            </div>
            
        </header>

        <div class='relative w-full aspect-[16/9] md:aspect-[21/9] lg:max-h-[500px] mb-6 overflow-hidden rounded-lg group'> 
            {
                heroImage && (
                    <Image
                        src={heroImage}
                        width={1200}
                        height={675}
                        quality={100}
                        format='jpg'
                        loading='eager'
                        class='w-full h-full object-cover rounded-lg transform transition-all duration-300 ease-in-out group-hover:scale-105 animate-fade-in'
                        alt={`${title}`}
                        title={`${title}`}
                    />
                )
            }
        </div>
        
        <style>
            .animate-fade-in {
                animation: fadeIn 0.5s ease-in forwards;
            }
        
            @keyframes fadeIn {
                from {
                    opacity: 0;
                }
                to {
                    opacity: 1;
                }
            }
        </style>

        {
            updatedDate && (
                <div class='last-updated-on'>
                    Última actualización en <FormattedDate date={updatedDate} />
                </div>
            )
        }

        <hr />

        <div class="mb-16">
            <slot />
        </div>

        {relatedPosts.length > 0 && (
            <div class="mt-16 pt-8 border-t dark:border-gray-800">
                <ListRelatedPosts posts={relatedPosts} />
            </div>
        )}
    </article>
</BaseLayout>

<script is:inline>
    const img = document.querySelector('img')
    const placeholder = document.querySelector('.placeholder')

    img?.addEventListener('load', () => {
        img.classList.add('opacity-100')
        placeholder.classList.add('opacity-0')
    })
</script>

<script>
    import { animate } from 'motion'

    animate(
        '.title',
        {
            opacity: [0, 1],
            clipPath: ['polygon(0 0, 0 0, 0 100%, 0% 100%)', 'polygon(100% 0, 0 0, 0 100%, 100% 100%)']
        },
        { duration: 1, easing: 'ease-in-out' }
    )
</script>

<script>
    function handleIntersection(
        entries: IntersectionObserverEntry[],
        observer: IntersectionObserver
    ) {
        entries.forEach((entry) => {
            const index = document.querySelector(`aside a[href="#${entry.target.id}"]`)

            if (entry.isIntersecting) {
                index?.classList.remove('bg-slate-200', 'dark:bg-slate-800')
                index?.classList.add(
                    'bg-indigo-600',
                    'dark:bg-indigo-700',
                    'text-white',
                    'font-bold',
                    'transition-colors',
                    'duration-200'
                )
            } else {
                index?.classList.add('bg-slate-200', 'dark:bg-slate-800')
                index?.classList.remove(
                    'bg-indigo-600',
                    'dark:bg-indigo-700',
                    'text-white',
                    'font-bold',
                    'transition-colors',
                    'duration-200'
                )
            }
        })
    }

    const headings = document.querySelectorAll(
        'div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6'
    )

    const options = {
        root: null,
        rootMargin: ' 15% 0px 0% 0px ',
        threshold: 1
    }

    const observer = new IntersectionObserver(handleIntersection, options)

    headings.forEach((heading) => {
        observer.observe(heading)
    })
</script>
