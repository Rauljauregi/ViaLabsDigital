---
import { type CollectionEntry, getCollection } from 'astro:content'
import BlogPost from '@/layouts/newsletter/BlogPost'
import Code from '@/components/mdx/Code'
import ListRelatedPosts from '@/components/newsletter/ListRelatedPosts'
import Share from '@/components/Share'
import TableOfContents from '@/components/TableOfContents'
import { app } from '../../../firebase/server'
import { getAuth } from 'firebase-admin/auth'

/* console.log("ER COOKIE:",Astro.cookies.get("session")?.value); */
const auth = getAuth(app)
let authentication = "false"
if (Astro.cookies.has('session')) {
	const sessionCookie = Astro.cookies.get('session')?.value
	const decodedCookie = await auth.verifySessionCookie(sessionCookie!)
	if (decodedCookie) {
		authentication = "true"
	}
}

const posts = await getCollection('newsletter');
/* export async function getStaticPaths() {
	const posts = await getPosts()

	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post
	}))
} */
type Props = CollectionEntry<'newsletter'>

const post = posts.find((p) => p.slug === Astro.params.slug);

const getRelatedPosts = (post: Props | undefined) => {
	const relatedPosts = posts.filter(
		(p) => p.slug !== post!.slug && p.data.tags.some((t) => post!.data.tags.includes(t))
	)
	return relatedPosts.slice(0, 3)
}

const relatedPosts = getRelatedPosts(post)

const { Content, headings, remarkPluginFrontmatter } = await post!.render()

---

<BlogPost data={post!.data} headings={headings} readTime={remarkPluginFrontmatter.minutesRead}>
	<div class='grid grid-cols-1 md:pl-2 md:grid-cols-[20%_auto] gap-16 mt-8'>
		<!-- aside  -->
		<aside class='md:flex flex-col gap-8 hidden'>
			<Share />
			<div class='sticky top-24 self-start hidden md:block transition-all duration-200'>
				{headings && headings.length > 0 && <TableOfContents {headings} />}
			</div>
		</aside>

		<!-- main -->
		<div class='max-w-full w-full'>
			<blog-post id="blog-container" class='prose prose-lg md:prose-xl dark:prose-invert mb-12 min-w-full' data-authentication={authentication}>
				<Content components={{ pre: Code }} />
			</blog-post>

			<div>
				<h2 class='font-bold text-lg dark:text-white mb-6'>Art√≠culos Relacionados</h2>
				<ListRelatedPosts posts={relatedPosts} />
			</div>
		</div>
	</div>
</BlogPost>

<script>
	const article = document.getElementById('blog-container');
	const isAuth = article?.dataset.authentication;
	if(isAuth === "true"){
		const blurred = document.getElementsByClassName('blur-lg');
		Array.from(blurred).map((box : any) => {
			box.classList.add('blur-none');
			box.classList.remove('blur-lg');
		});
	}

	if(isAuth === "false"){
		const blurred = document.getElementsByClassName('blur-none');
		Array.from(blurred).map((box : any) => {
			box.classList.add('blur-lg');
			box.classList.remove('blur-none');
		});
	}
</script>