---
import { type CollectionEntry, getCollection } from 'astro:content';
import BlogPost from '@/layouts/BlogPost';
import ListRelatedPosts from '@/components/ListRelatedPosts';
import Share from '@/components/Share';
import TableOfContents from '@/components/TableOfContents';
import PopUp from '@/components/article/PopUp';
import { app } from '../../firebase/server';
import { getAuth } from 'firebase-admin/auth';

// Inicializa autenticación con Firebase
const auth = getAuth(app);
let authentication = "false";

// Obtén el slug de la URL y limpialo
const currentSlug = Astro.params.slug?.replace(/^\/+|\/+$/g, '');
console.log('Slug actual:', currentSlug);

if (Astro.cookies.has("session")) {
  const sessionCookie = Astro.cookies.get("session")?.value;
  try {
    await auth.verifySessionCookie(sessionCookie);
    authentication = "true";
  } catch (error) {
    console.error("Error verifying session cookie:", error.message);
    authentication = "false";
  }
}

// Obtén la colección de blog
const posts = await getCollection('blog');
const post = posts.find((p) => p.slug === currentSlug);

// Redirige a una página 404 si el post no existe
if (!post) {
  console.error(`No se encontró ningún post con el slug: ${currentSlug}`);
  return Astro.redirect('/404');
}

// Obtén los posts relacionados con una lógica mejorada
const getRelatedPosts = (currentPost) => {
  return posts
    .filter((p) => {
      // Excluir el post actual
      if (p.slug === currentPost.slug) return false;
      
      let score = 0;
      
      // Puntos por tags compartidos
      const sharedTags = p.data.tags?.filter(tag => 
        currentPost.data.tags?.includes(tag)
      ) || [];
      score += sharedTags.length * 2;
      
      // Puntos por misma categoría
      if (p.data.category === currentPost.data.category) {
        score += 3;
      }
      
      // Considerar relacionado si tiene al menos un tag en común o misma categoría
      return score > 0;
    })
    .sort((a, b) => {
      // Ordenar por fecha si tienen la misma relevancia
      const dateA = new Date(a.data.pubDate);
      const dateB = new Date(b.data.pubDate);
      return dateB.getTime() - dateA.getTime();
    })
    .slice(0, 3);
};
const relatedPosts = getRelatedPosts(post);

// Renderiza el contenido del post con validación adicional
let Content, headings;
try {
  const rendered = await post.render();
  Content = rendered.Content;
  headings = rendered.headings;
} catch (error) {
  console.error(`Error al renderizar el contenido del post: ${error.message}`);
  return Astro.redirect('/404');
}
---

<BlogPost 
  data={post.data} 
  headings={headings}
  readTime="5 min"
>
  <PopUp />
  <div class="grid grid-cols-1 md:grid-cols-[20%_auto] gap-16 mt-8">
    <!-- Barra lateral -->
    <aside class="hidden md:block">
      <Share />
      {headings?.length > 0 && <TableOfContents headings={headings} />}
    </aside>

    <!-- Contenido principal -->
    <main>
      <article id="blog-container" class="prose dark:prose-invert mb-16" data-authentication={authentication}>
        <Content />
      </article>
      <div class="mt-16 pt-8 border-t dark:border-gray-800">
        <h2 class="text-2xl font-bold mb-8">Artículos Relacionados</h2>
        <ListRelatedPosts posts={relatedPosts} />
      </div>
    </main>
  </div>
</BlogPost>

<script>
  const article = document.getElementById('blog-container');
  const isAuth = article?.dataset.authentication;

  if (isAuth === 'true') {
    const blurred = document.getElementsByClassName('blur-lg');
    Array.from(blurred).forEach((box) => {
      box.classList.add('blur-none');
      box.classList.remove('blur-lg');
    });
  }

  if (isAuth === 'false') {
    const blurred = document.getElementsByClassName('blur-lg');
    Array.from(blurred).forEach((box) => {
      const container = box.cloneNode(false);
      box.classList.add('z-0');

      // Crear contenedor principal
      container.classList.add('relative', 'flex');
      container.classList.remove('blur-lg');

      // Crear contenedor de ojo
      const eyeContainer = document.createElement('div');
      eyeContainer.classList.add(
        'p-2',
        'absolute',
        'top-1/3',
        'left-1/2',
        'transform',
        '-translate-x-1/2',
        '-translate-y-1/3',
        'flex',
        'flex-col',
        'justify-center',
        'items-center',
        'gap-4',
        'z-10',
        'w-full',
        'h-full'
      );

      // Botón de suscripción
      const submitButton = document.createElement('button');
      submitButton.classList.add('flex', 'flex-col', 'items-center', 'justify-center', 'w-full', 'h-full');
      submitButton.type = 'submit';
      submitButton.textContent = 'Suscríbete a la newsletter para desbloquear el contenido';

      // SVG de ojo
      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      svg.classList.add('flex-grow');
      svg.setAttribute('width', '64');
      svg.setAttribute('height', '64');
      svg.setAttribute('fill', 'currentColor');
      svg.setAttribute('class', 'bi bi-eye-slash');
      svg.setAttribute('viewBox', '0 0 16 16');

      const path1 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      path1.setAttribute(
        'd',
        'M13.359 11.238C15.06 9.72 16 8 16 8s-3-5.5-8-5.5a7.028 7.028 0 0 0-2.79.588l.77.771A5.944 5.944 0 0 1 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.134 13.134 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755-.165.165-.337.328-.517.486l.708.709z'
      );

      const path2 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      path2.setAttribute(
        'd',
        'M11.297 9.176a3.5 3.5 0 0 0-4.474-4.474l.823.823a2.5 2.5 0 0 1 2.829 2.829l.822.822zm-2.943 1.299.822.822a3.5 3.5 0 0 1-4.474-4.474l.823.823a2.5 2.5 0 0 0 2.829 2.829z'
      );

      const path3 = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      path3.setAttribute(
        'd',
        'M3.35 5.47c-.18.16-.353.322-.518.487A13.134 13.134 0 0 0 1.172 8l.195.288c.335.48.83 1.12 1.465 1.755C4.121 11.332 5.881 12.5 8 12.5c.716 0 1.39-.133 2.02-.36l.77.772A7.029 7.029 0 0 1 8 13.5C3 13.5 0 8 0 8s.939-1.721 2.641-3.238l.708.709zm10.296 8.884-12-12 .708-.708 12 12-.708.708z'
      );

      svg.appendChild(path1);
      svg.appendChild(path2);
      svg.appendChild(path3);

      submitButton.appendChild(svg);
      submitButton.addEventListener('click', () => {
        const popUp = document.getElementById('pop-up');
        popUp?.classList.remove('hidden');
      });

      eyeContainer.appendChild(submitButton);
      container.appendChild(box);
      container.appendChild(eyeContainer);

      box.parentNode.insertBefore(container, box.nextSibling);
    });
  }
</script>