---
import ListCategories from '@/components/ListCategories'
import ListPosts from '@/components/ListPosts'
import Shape from '@/components/icons/Shape'
import BaseLayout from '@/layouts/BaseLayout'
import { getPosts } from '@/utils'
/* import { app } from '../firebase/server'
import { getAuth } from 'firebase-admin/auth' */

export const prerender = true
const cookie = await Astro.cookies.get("session")?.value;
const type = typeof(cookie);

/* console.log("ER COOKIE:",Astro.cookies.get("session")?.value); */
/* const auth = getAuth(app)
let isAuthenticated = false
if (Astro.cookies.has('session')) {
	const sessionCookie = Astro.cookies.get('session')?.value
	const decodedCookie = await auth.verifySessionCookie(sessionCookie!)
	if (decodedCookie) {
		isAuthenticated = true
	}
}


console.log("isAuthenticated : ",isAuthenticated); */

const MAX_POSTS = 5 // max number of posts to show on the home page
const posts = await getPosts(MAX_POSTS)
---

<BaseLayout title='Home'>
	<div class='flex justify-start items-center gap-2 title'>
		<Shape />
		<h1 class='text-5xl font-semibold tracking-wide'>
			Mindful ML - Cada viernes un email sobre IA
			{cookie} - {type}
		</h1>
	</div>

	<ListCategories />

	<div>
		<h2 class='text-lg font-medium tracking-wide text-end'>Último Artículo</h2>
		<ListPosts FirstBig={true} posts={posts} />
	</div>
</BaseLayout>

<script>
	import { signInWithCustomToken, getAuth, verifyBeforeUpdateEmail } from 'firebase/auth';
	import { app } from '../firebase/client';
	import { animate } from 'motion';
	const url = new URL(window.location.href);
	const customToken = url.searchParams.get('customToken');
	const email = url.searchParams.get('email');
	const customTokenAlreadyPresent = url.searchParams.get('customTokenAlreadyPresent');

	const showAnimations = localStorage.getItem('animations') === 'true'

	if (showAnimations) {
		animate(
			'.title',
			{ y: [80, 0], opacity: [0, 1] },
			{
				duration: 2.5,
				opacity: { duration: 3 },

				offset: [0, 0.55, 0.75]
			}
		)
	}

	if(customToken) {
		const auth = getAuth(app)
		const userCredential = await signInWithCustomToken(auth, customToken)
		const idToken = await userCredential.user.getIdToken()
		const user = userCredential.user
		if (!user.email) {
			// Nuovo indirizzo email

			// Aggiorna l'indirizzo email
			verifyBeforeUpdateEmail(user, email!)
				.then(() => {
					console.log('Email updated successfully')
				})
				.catch((error) => {
					console.error('Error updating email: ', error)
				})
		} else {
			console.log('email already present!')
		}

		const response = await fetch('/api/auth/signin', {
			method: 'GET',
			headers: {
				Authorization: `Bearer ${idToken}`
			}
		})

		if (response.redirected) {
			window.location.assign(response.url)
		}
	}

	if(customTokenAlreadyPresent) {
		const auth = getAuth(app)
		const userCredential = await signInWithCustomToken(auth, customTokenAlreadyPresent);
		const idToken = await userCredential.user.getIdToken();
		const response = await fetch('/api/auth/signin', {
			method: 'GET',
			headers: {
				Authorization: `Bearer ${idToken}`
			}
		})

		if (response.redirected) {
			window.location.assign(response.url)
		}
	}
</script>
