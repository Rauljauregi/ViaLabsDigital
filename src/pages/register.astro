---
import ListCategories from '@/components/ListCategories'
import ListPosts from '@/components/ListPosts'
import ProviderAnimations from '@/components/ProviderAnimations'
import ProviderTheme from '@/components/ProviderTheme'
import MoonIcon from '@/components/icons/MoonIcon'
import Shape from '@/components/icons/Shape'
import SunIcon from '@/components/icons/SunIcon'
import BaseLayout from '@/layouts/BaseLayout'
import { getPosts } from '@/utils'

export const prerender = false
const url = new URL(Astro.url);
const emailParam = url.searchParams.get('email');
const customToken = url.searchParams.get('customToken');
const customTokenAlreadyPresent = url.searchParams.get('customTokenAlreadyPresent');
const sessionCookie = Astro.cookies.get('session');

let customTokenMessage = "Procesando..."

if(customToken && !customTokenAlreadyPresent){
   customTokenMessage = "Suscribiendo a la Newsletter..."
}

if(customTokenAlreadyPresent && !customToken) {
   customTokenMessage = "Preparando tus Art√≠culos..."
}

if(!customToken && !customTokenAlreadyPresent){
   console.log("!custom url is: ", url);
   return Astro.redirect("/");
}

if(sessionCookie){
   console.log("sessionCookie is present!");
   return Astro.redirect("/");
}
---

<html lang='es' class='scroll-smooth'>
	<head>
		<ProviderTheme />
		<ProviderAnimations />
	</head>

	<body class='relative bg-white text-stone-950 dark:bg-[#0a0910] dark:text-white'>
		<header class='flex justify-between items-center h-full font-semibold flex-wrap my-4'>
				<div class='md:ml-3 pl-2.5 border-l-2 flex justify-center items-center gap-2'>
					<span class='theme relative'>
						<span class='sun-logo w-fit h-fit opacity-0 transition-transform duration-500'>
							<SunIcon />
						</span>
						<span
							class='moon-logo w-fit h-fit absolute opacity-0 inset-0 transition-transform duration-500'>
							<MoonIcon />
						</span>
					</span>
				</div>
			</nav>
		</header>
		<main
			class='h-screen w-screen flex justify-center items-center'
		>
         <div class="inline-flex items-center px-4 py-2 font-semibold leading-6 text-sm shadow rounded-md text-white bg-indigo-500 transition ease-in-out duration-150 cursor-not-allowed">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
               <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
               <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            {customTokenMessage}
         </div>
		</main>
	</body>
</html>
<script>
	import { signInWithCustomToken, getAuth, verifyBeforeUpdateEmail } from 'firebase/auth';
	import { app } from '../firebase/client';

	const url = new URL(window.location.href);
	const customToken = url.searchParams.get('customToken');
	const email = url.searchParams.get('email');
	const customTokenAlreadyPresent = url.searchParams.get('customTokenAlreadyPresent');

	if(customToken) {
		const auth = getAuth(app)
		const userCredential = await signInWithCustomToken(auth, customToken)
		const idToken = await userCredential.user.getIdToken()

		const response = await fetch('/api/auth/signin', {
			method: 'GET',
			headers: {
				Authorization: `Bearer ${idToken}`
			}
		})

		if (response.redirected) {
			window.location.assign(response.url)
		}
	}

	if(customTokenAlreadyPresent) {
		const auth = getAuth(app)
		const userCredential = await signInWithCustomToken(auth, customTokenAlreadyPresent);
		const idToken = await userCredential.user.getIdToken();
		const response = await fetch('/api/auth/signin', {
			method: 'GET',
			headers: {
				Authorization: `Bearer ${idToken}`
			}
		})

		if (response.redirected) {
			window.location.assign(response.url)
		}
	}

</script>