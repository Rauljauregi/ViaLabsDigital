---
import ListCategories from '@/components/ListCategories'
import ListPosts from '@/components/ListPosts'
import ProviderAnimations from '@/components/ProviderAnimations'
import ProviderTheme from '@/components/ProviderTheme'
import Shape from '@/components/icons/Shape'
import BaseLayout from '@/layouts/BaseLayout'
import { getPosts } from '@/utils'

export const prerender = false
const url = new URL(Astro.url);
const emailParam = url.searchParams.get('email');
const customToken = url.searchParams.get('customToken');
const customTokenAlreadyPresent = url.searchParams.get('customTokenAlreadyPresent');

if(!customToken || !customTokenAlreadyPresent){
   console.log("ops");
   return Astro.redirect("/");
}
---

<html lang='es' class='scroll-smooth'>
	<head>
		<ProviderTheme />
		<ProviderAnimations />
	</head>

	<body class='relative bg-white text-stone-950 dark:bg-[#0a0910] dark:text-white'>
		<main
			class='h-screen w-screen flex justify-center items-center'
		>
      <img src="./main.gif" alt="loader"/>
		</main>
	</body>
</html>
<script>
	import { signInWithCustomToken, getAuth, verifyBeforeUpdateEmail } from 'firebase/auth';
	import { app } from '../firebase/client';

	const url = new URL(window.location.href);
	const customToken = url.searchParams.get('customToken');
	const email = url.searchParams.get('email');
	const customTokenAlreadyPresent = url.searchParams.get('customTokenAlreadyPresent');


	if(customToken) {
		const auth = getAuth(app)
		const userCredential = await signInWithCustomToken(auth, customToken)
		const idToken = await userCredential.user.getIdToken()
		const user = userCredential.user
		if (!user.email) {
			// Nuovo indirizzo email

			// Aggiorna l'indirizzo email
			verifyBeforeUpdateEmail(user, email!)
				.then(() => {
					console.log('Email updated successfully')
				})
				.catch((error) => {
					console.error('Error updating email: ', error)
				})
		} else {
			console.log('email already present!')
		}

		const response = await fetch('/api/auth/signin', {
			method: 'GET',
			headers: {
				Authorization: `Bearer ${idToken}`
			}
		})

		if (response.redirected) {
			window.location.assign(response.url)
		}
	}

	if(customTokenAlreadyPresent) {
		const auth = getAuth(app)
		const userCredential = await signInWithCustomToken(auth, customTokenAlreadyPresent);
		const idToken = await userCredential.user.getIdToken();
		const response = await fetch('/api/auth/signin', {
			method: 'GET',
			headers: {
				Authorization: `Bearer ${idToken}`
			}
		})

		if (response.redirected) {
			window.location.assign(response.url)
		}
	}

</script>